import _ from "lodash";
import { Buffer } from "buffer";
import isUint8Array from "@stdlib/assert-is-uint8array";

const crypto = window.crypto;
const subtle = window.crypto.subtle;

/*
The crypto core is a random oracle that takes 16384 bytes as input seed.

To start, a starter buffer is fed into the class. It then generates 256 keys
based on this data. For anything to be hashed, a SHA-512 hash one the message
is done first, and based on the first byte, a HMAC using that key and the 1st
digest is hashed again.

The 256 keys are generated by hashing an array of (8192+64) bytes, where the
first 8192 bytes are the original whole input, and the last 64 bytes being 
offseted [64*i, 64*(i+1)] bytes.
*/

const SINGLE_KEY_BYTES = 64;
const TOTAL_SEED_BYTES = SINGLE_KEY_BYTES * 256;


class CryptoCore {

	#keys;

	constructor(){
		this.#keys = new Map();
	}

	#erase_array(array){
		for(let i=0; i<5; i++) crypto.getRandomValues(array);
	}

	async init(starter){
		if(!isUint8Array(starter)){
			throw Error("starter param must be a Uint8Array.")
		};
		if(this.#keys.size == 256) throw Error("Already initialized.");

		if(starter.length != TOTAL_SEED_BYTES){
			throw Error("starter random seed must have " + TOTAL_SEED_BYTES + " bytes.");
		}

		const pool = new Uint8Array(TOTAL_SEED_BYTES + SINGLE_KEY_BYTES);
		pool.set(starter, 0);

		for(let i=0, j=0; i<TOTAL_SEED_BYTES; i+=SINGLE_KEY_BYTES, j++){
			let subarray = starter.subarray(i, i+SINGLE_KEY_BYTES);
			pool.set(subarray, TOTAL_SEED_BYTES);
			this.#keys.set(j, await this.#derive_key(pool));
		}

		this.#erase_array(starter);
		this.#erase_array(pool);
	}

	async #derive_key(pool){
		const digest = new Uint8Array(await subtle.digest("SHA-512", pool));
		const key = await subtle.importKey(
			'raw',
			digest,
			{ name: 'HMAC', 'hash': 'SHA-512' },
			false,
			["sign"]
		);
		this.#erase_array(digest);
		return key;
	}

	async digest(data){
		if(!isUint8Array(data)) throw Error("data must be a Uint8Array");

		if(this.#keys.size != 256) throw Error("Not initialized.");

		const digest1 = new Uint8Array(await subtle.digest("SHA-512", data));
		const key_index = digest1[0];
		const key = this.#keys.get(key_index);

		const digest2 = new Uint8Array(await subtle.sign(
			{ name: "HMAC" },
			key,
			digest1
		));
		this.#erase_array(data);
		this.#erase_array(digest1);
		return digest2;
	}
}

export { CryptoCore, TOTAL_SEED_BYTES };